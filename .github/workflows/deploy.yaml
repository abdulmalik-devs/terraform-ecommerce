name: Terraform CI/CD

on:
  push:
    branches: ['main']

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  AWS_REGION: us-east-1

jobs:
  provision-infra:
    runs-on: ubuntu-latest
    outputs:
      CLIENT_IP: ${{ steps.set-ip.outputs.client }}
      SERVER_IP: ${{ steps.set-ip.outputs.server }}
    steps:  
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Format Terraform code
        id: format
        run: terraform fmt
      - name: Terraform Init
        id: init
        run: terraform init
      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan
      # - name: Terraform Apply
      #   run: terraform apply --auto-approve 
      - name: Terraform Destroy
        run: terraform destroy --auto-approve
  #     - name: Set outputs
  #       id: set-ip
  #       run: |
  #         echo "::set-output name=client::$(terraform output client_admin_ip)"
  #         echo "::set-output name=server::$(terraform output server_ip)"
  #       working-directory: ./

  # deploy_to_server:
  #   runs-on: ubuntu-latest
  #   needs: provision-infra
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set IP env variable
  #       run: |
  #         echo CLIENT_IP=${{ needs.provision-infra.outputs.CLIENT_IP }} >> $GITHUB_ENV
  #         echo SERVER_IP=${{ needs.provision-infra.outputs.SERVER_IP }} >> $GITHUB_ENV

  #     - name: SSH to Server Instance
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ env.CLIENT_IP }}
  #         username: ubuntu
  #         key: ${{ env.AWS_PRIVATE_KEY }}
  #         envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
  #         script: |
  #           echo "$AWS_PRIVATE_KEY" > access.pem
  #           sudo chmod 400 access.pem
  #           sudo ssh -o StrictHostKeyChecking=no -i "access.pem" ubuntu@${{ env.SERVER_IP }} "bash -s" << EOF
  #           echo "Hello, private instance!" > hello.txt
  #           EOF
         
            # echo "*****************************************************************"
            # echo "Performing the following actions on Server Instance"
            # echo "*****************************************************************         
            # sudo apt-get update
            # sudo apt-get install git -y

            # echo "---------------------------------------------"
            # echo "--INSTALL NVM TO USE A SPECIFIC NODE VERSION--"
            # echo "----------------------------------------------"
            # sudo apt-get install curl
            # sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
            # export NVM_DIR="$HOME/.nvm"
            # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
            # [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

            # nvm install 18
            # sudo apt-get install npm -y
            # nvm alias default 18
            # npm -v
            # node -v

            # echo "-----PM2------"
            # sudo npm install -g pm2
            # sudo pm2 startup systemd

            # echo "-----NGINX------"
            # sudo apt-get install -y nginx

            # echo "---FIREWALL---"
            # sudo ufw allow OpenSSH
            # sudo ufw allow 'Nginx Full'
            # sudo ufw --force enable 

            # echo "******************************************"
            # echo "Performing the following actions for Server"
            # echo "******************************************" 
            # sudo git clone https://github.com/abdulmalik-devs/mern-ecommerce-project.git
            # sudo cd mern-ecommerce-project/
            # sudo cd web_services/
            # sudo npm install
            # sudo pm2 delete backend || true

            # # Create a new Nginx site configuration file
            # sudo tee /etc/nginx/sites-available/myapp.conf > /dev/null <<EOF
            # server {
            #     listen 80 default_server;
            #     server_name _;  # Replace with your actual domain or IP address

            #     location / {
            #         proxy_pass http://localhost:5002/api/;
            #     }
            # }
            # EOF

            # # Remove the default Nginx site configuration file
            # sudo rm -rf /etc/nginx/sites-enabled/default

            # # Create a symbolic link to enable the new site configuration
            # sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/

            # # Test the Nginx configuration for any syntax errors
            # sudo nginx -t

            # # Restart Nginx to apply the new configuration
            # sudo systemctl restart nginx

            # sudo pm2 start index.js --name "backend" --spa

            # echo "******************************************"
            # echo "-----Server run Successfully--------"
            # echo "*******************************************

  # deploy_to_client:
  #   runs-on: ubuntu-latest
  #   needs: [provision-infra, deploy_to_server]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set IP env variable
  #       run: |
  #         echo CLIENT_IP=${{ needs.provision-infra.outputs.CLIENT_IP }} >> $GITHUB_ENV
  #         echo SERVER_IP=${{ needs.provision-infra.outputs.SERVER_IP }} >> $GITHUB_ENV
  #     - name: SSH to Server Instance
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ env.CLIENT_IP }}
  #         username: ubuntu
  #         key: ${{ env.AWS_PRIVATE_KEY }}
  #         envs: PRIVATE_SSH_KEY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
  #         script: |
  #           AWS_PRIVATE_KEY=${{ env.AWS_PRIVATE_KEY }}
  #           echo $AWS_PRIVATE_KEY > webi.pem
  #           chmod 400 webi.pem
  #           ssh -o StrictHostKeyChecking=no -i "webi.pem" ubuntu@${{ env.SERVER_IP }}

  #           echo "----Successfully Login into Server Instance-------"
            
  #           echo "*****************************************************************"
  #           echo "Performing the following actions on Server Instance"
  #           echo "*****************************************************************         
  #           sudo apt-get update
  #           sudo apt-get install git -y

  #           echo "---------------------------------------------"
  #           echo "--INSTALL NVM TO USE A SPECIFIC NODE VERSION--"
  #           echo "----------------------------------------------"
  #           sudo apt-get install curl
  #           sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  #           export NVM_DIR="$HOME/.nvm"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
  #           [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

  #           nvm install 18
  #           sudo apt-get install npm -y
  #           nvm alias default 18
  #           npm -v
  #           node -v

  #           echo "-----PM2------"
  #           sudo npm install -g pm2
  #           sudo pm2 startup systemd

  #           echo "-----NGINX------"
  #           sudo apt-get install -y nginx

  #           echo "---FIREWALL---"
  #           sudo ufw allow OpenSSH
  #           sudo ufw allow 'Nginx Full'
  #           sudo ufw --force enable 

  #           echo "******************************************"
  #           echo "Performing the following actions for Server"
  #           echo "******************************************" 
  #           sudo git clone https://github.com/abdulmalik-devs/mern-ecommerce-project.git
  #           sudo cd mern-ecommerce-project/
  #           sudo cd web_services/
  #           sudo npm install
  #           sudo pm2 delete backend || true

  #           # Create a new Nginx site configuration file
  #           sudo tee /etc/nginx/sites-available/myapp.conf > /dev/null <<EOF
  #           server {
  #               listen 80 default_server;
  #               server_name _;  # Replace with your actual domain or IP address

  #               location / {
  #                   proxy_pass http://localhost:5002/api/;
  #               }
  #           }
  #           EOF

  #           # Remove the default Nginx site configuration file
  #           sudo rm -rf /etc/nginx/sites-enabled/default

  #           # Create a symbolic link to enable the new site configuration
  #           sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/

  #           # Test the Nginx configuration for any syntax errors
  #           sudo nginx -t

  #           # Restart Nginx to apply the new configuration
  #           sudo systemctl restart nginx

  #           sudo pm2 start index.js --name "backend" --spa

  #           echo "******************************************"
  #           echo "-----Server run Successfully--------"
  # #           echo "***************************************







            