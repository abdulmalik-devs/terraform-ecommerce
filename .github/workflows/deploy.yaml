name: Terraform CI/CD

on:
  push:
    branches: ['main']

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  AWS_REGION: us-east-1

jobs:
  provision-infra:
    runs-on: ubuntu-latest
    outputs:
      CLIENT_IP: ${{ steps.set-ip.outputs.client }}
      SERVER_IP: ${{ steps.set-ip.outputs.server }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Format Terraform code
        id: format
        run: terraform fmt
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Plan
        id: plan
        run: terraform plan
      - name: Terraform Apply
        run: terraform apply --auto-approve
      - name: Terraform Destroy
        run: terraform destroy --auto-approve
  #     - name: Set outputs
  #       id: set-ip
  #       run: |
  #         echo "::set-output name=client::$(terraform output client_admin_ip)"
  #         echo "::set-output name=server::$(terraform output server-ip)"
  #       working-directory: ./

  # deploy_to_client:
  #   runs-on: ubuntu-latest
  #   needs: provision-infra
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set IP env variable
  #       run: |
  #         echo CLIENT_IP=${{ needs.provision-infra.outputs.CLIENT_IP }} >> $GITHUB_ENV
  #     - name: SSH to Client-Admin
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ env.CLIENT_IP }}
  #         username: ubuntu
  #         key: ${{ env.AWS_PRIVATE_KEY }}
  #         envs: PRIVATE_SSH_KEY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
  #         script: |-
  #           echo "*****************************************************************"
  #           echo "Performing the following actions on Client-Admin Instance in AZ1"
  #           echo "*****************************************************************"

  #           sudo apt-get update
  #           sudo apt-get install git -y
                      
  #           echo "---------------------------------------------"
  #           echo "--INSTALL NVM TO USE A SPECIFIC NODE VERSION--"
  #           echo "----------------------------------------------"
  #           sudo apt-get install curl
  #           sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  #           export NVM_DIR="$HOME/.nvm"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
  #           [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
                      
  #           nvm install 18
  #           sudo apt-get install npm -y
  #           nvm alias default 18
  #           npm -v
  #           node -v
                      
  #           echo "-----PM2------"
  #           sudo npm install -g pm2
  #           sudo pm2 startup systemd
                      
  #           echo "-----NGINX------"
  #           sudo apt-get install -y nginx
                      
  #           echo "---FIREWALL---"
  #           sudo ufw allow OpenSSH
  #           sudo ufw allow 'Nginx Full'
  #           sudo ufw --force enable 
                      
  #           echo "******************************************"
  #           echo "Performing the following actions for Client"
  #           echo "******************************************"

  #           sudo git clone https://github.com/abdulmalik-devs/mern-ecommerce-project.git
  #           sudo cd mern-ecommerce-project/
  #           sudo cd web_panel
  #           echo REACT_APP_API_BASEURL=http://"${{ needs.provision-infra.outputs.SERVER_IP }}" > .env
  #           sudo rm -rf build
  #           sudo npm install
  #           sudo npm run build
  #           sudo pm2 delete client-server || true
                      
  #           # Create a new Nginx site configuration file
  #           sudo tee /etc/nginx/sites-available/myapp.conf > /dev/null <<EOF
  #           server {
  #               listen 80 default_server;
  #               server_name _;  # Replace with your actual domain or IP address
                      
  #               location / {
  #                   proxy_pass http://localhost:3000;
  #               }
              
  #               location /admin {
  #                   proxy_pass http://localhost:3001;
  #               }
  #           }
  #           EOF
              
  #           # Remove the default Nginx site configuration file
  #           sudo rm -rf /etc/nginx/sites-enabled/default
              
  #           # Create a symbolic link to enable the new site configuration
  #           sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/
              
  #           # Test the Nginx configuration for any syntax errors
  #           sudo nginx -t
              
  #           # Restart Nginx to apply the new configuration
  #           sudo systemctl restart nginx
              
  #           sudo pm2 serve build/ 3000 -f --name "client-server" --spa
              
              
  #           echo "******************************************"
  #           echo "Performing the following actions for Admin"
  #           echo "******************************************"
              
  #           cd /home/ubuntu
  #           cd mern-ecommerce-project/
  #           cd web_admin
  #           sudo rm -rf build
  #           sudo npm install
  #           sudo npm run build
  #           sudo pm2 delete client-admin || true
  #           sudo pm2 serve build/ 3001 -f --name "admin-server" --spa
              
              
  #           echo "******************************************"
  #           echo "-----Client-Admin run Successfully--------"
  #           echo "******************************************"

  # deploy_to_server:
  #   runs-on: ubuntu-latest
  #   needs: [provision-infra, deploy_to_client]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set IP env variable
  #       run: |
  #         echo CLIENT_IP=${{ needs.provision-infra.outputs.CLIENT_IP }} >> $GITHUB_ENV
  #         echo SERVER_IP=${{ needs.provision-infra.outputs.SERVER_IP }} >> $GITHUB_ENV
  #     - name: SSH to Client-Admin
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ env.SERVER_IP }}
  #         username: ubuntu
  #         key: ${{ env.AWS_PRIVATE_KEY }}
  #         envs: PRIVATE_SSH_KEY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
  #         script: |-
  #           echo "*****************************************************************"
  #           echo "Performing the following actions on Client-Admin Instance in AZ1"
  #           echo "*****************************************************************"  
  #           sudo apt-get update
  #           sudo apt-get install git -y

  #           echo "---------------------------------------------"
  #           echo "--INSTALL NVM TO USE A SPECIFIC NODE VERSION--"
  #           echo "----------------------------------------------"
  #           sudo apt-get install curl
  #           sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  #           export NVM_DIR="$HOME/.nvm"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
  #           [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

  #           nvm install 18
  #           sudo apt-get install npm -y
  #           nvm alias default 18
  #           npm -v
  #           node -v

  #           echo "-----PM2------"
  #           sudo npm install -g pm2
  #           sudo pm2 startup systemd

  #           echo "-----NGINX------"
  #           sudo apt-get install -y nginx

  #           echo "---FIREWALL---"
  #           sudo ufw allow OpenSSH
  #           sudo ufw allow 'Nginx Full'
  #           sudo ufw --force enable 

  #           echo "******************************************"
  #           echo "Performing the following actions for Server"
  #           echo "******************************************" 
  #           sudo git clone https://github.com/abdulmalik-devs/mern-ecommerce-project.git
  #           sudo cd mern-ecommerce-project/
  #           sudo cd web_services/
  #           sudo npm install
  #           sudo pm2 delete backend || true

  #           # Create a new Nginx site configuration file
  #           sudo tee /etc/nginx/sites-available/myapp.conf > /dev/null <<EOF
  #           server {
  #               listen 80 default_server;
  #               server_name _;  # Replace with your actual domain or IP address

  #               location / {
  #                   proxy_pass http://localhost:5002/api/;
  #               }
  #           }
  #           EOF

  #           # Remove the default Nginx site configuration file
  #           sudo rm -rf /etc/nginx/sites-enabled/default

  #           # Create a symbolic link to enable the new site configuration
  #           sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/

  #           # Test the Nginx configuration for any syntax errors
  #           sudo nginx -t

  #           # Restart Nginx to apply the new configuration
  #           sudo systemctl restart nginx

  #           sudo pm2 start index.js --name "backend" --spa

  #           echo "******************************************"
  #           echo "-----Server run Successfully--------"
  #           echo "******************************************"