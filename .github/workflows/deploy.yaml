name: Terraform CI/CD

on:
  push:
    branches: ['main']

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  AWS_REGION: us-east-1

jobs:
  provision-infra:
    runs-on: ubuntu-latest
    outputs:
      CLIENT_IP: ${{ steps.set-ip.outputs.client }}
      SERVER_IP: ${{ steps.set-ip.outputs.server }}
    steps:  
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Format Terraform code
        id: format
        run: terraform fmt
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Plan
        id: plan
        run: terraform plan
      - name: Terraform Apply
        run: terraform apply --auto-approve 
      - name: Set outputs
        id: set-ip
        run: |
          echo "::set-output name=client::$(terraform output client_admin_ip)"
          echo "::set-output name=server::$(terraform output server_ip)"
        working-directory: ./

  deploy_to_server:
    runs-on: ubuntu-latest
    needs: provision-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run: |
          echo CLIENT_IP=${{ needs.provision-infra.outputs.CLIENT_IP }} >> $GITHUB_ENV
          echo SERVER_IP=${{ needs.provision-infra.outputs.SERVER_IP }} >> $GITHUB_ENV

      - name: SSH to Server Instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.CLIENT_IP }}
          username: ubuntu
          key: ${{ env.AWS_PRIVATE_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
          script: |
            echo "*****SUCCESSFULLY SSH INTO PUBLIC INSTANCE*******"
            echo ${{ env.AWS_PRIVATE_KEY }} > word.pem
            sudo chmod 400 word.pem
            sudo ssh -o StrictHostKeyChecking=no -i "word.pem" ubuntu@${{ env.SERVER_IP }} "bash -s" << EOF
            echo "----------------------------------------------------"
            echo "Performing the following actions on Server Instance"
            echo "----------------------------------------------------"
            pwd
            ls
            sudo apt-get update
            # sudo apt-get install git -y
            # sudo apt-get install curl -y

            # echo "-----NPM------"

            # sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
            # export NVM_DIR="$HOME/.nvm"
            # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
            # [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

            # nvm install 18
            # sudo apt-get install npm -y
            # nvm alias default 18
            # npm -v
            # node -v

            # echo "-----PM2------"
            # sudo npm install -g pm2 -y

            # echo "-----NGINX------"
            # sudo apt-get install -y nginx

            # echo "---FIREWALL---"
            # sudo ufw allow OpenSSH
            # sudo ufw allow 'Nginx Full'
            # sudo ufw --force enable 


            # echo "---------Nginx Configration---------------"
            # pwd
            # ls -al
            # cd ./application/server
            # sudo npm install
            # sudo tee /etc/nginx/sites-available/myapp.conf > /dev/null <<EOF
            # server {
            #     listen 80 default_server;
            #     server_name _;  

            #     location / {
            #         proxy_pass http://localhost:5002/api/;
            #     }
            # }
            # EOF

            # sudo rm -r /etc/nginx/sites-enabled/default
            # sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled
            # sudo nginx -t
            # sudo systemctl restart nginx
            # echo "-------The configuration is completed successfully------"

            # echo "-------Starting the server----------"
            # sudo pm2 start index.js --name "backend-server"
            # EOF

            

  # deploy_to_client:
  #   runs-on: ubuntu-latest
  #   needs: [provision-infra, deploy_to_server]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set IP env variable
  #       run: |
  #         echo CLIENT_IP=${{ needs.provision-infra.outputs.CLIENT_IP }} >> $GITHUB_ENV
  #         echo SERVER_IP=${{ needs.provision-infra.outputs.SERVER_IP }} >> $GITHUB_ENV
  #     - name: SSH to Server Instance
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ env.CLIENT_IP }}
  #         username: ubuntu
  #         key: ${{ env.AWS_PRIVATE_KEY }}
  #         envs: PRIVATE_SSH_KEY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
  #         script: |
  #           echo "----------------------------------------------------------"
  #           echo "Performing the following actions on Client-Admin Instance"
  #           echo "----------------------------------------------------------"
            
  #           sudo apt-get update
  #           sudo apt-get install git -y
  #           sudo apt-get install curl -y
            
  #           echo "-----NPM------"
  #           sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  #           export NVM_DIR="$HOME/.nvm"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
  #           [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  #           nvm install 18 -y
  #           sudo apt-get install npm -y
  #           nvm alias default 18
  #           npm -v
  #           node -v
            
  #           echo "-----PM2------"
  #           sudo npm install -g pm2 -y
            
  #           echo "-----NGINX------"
  #           sudo apt-get install -y nginx
            
  #           echo "---FIREWALL---"
  #           sudo ufw allow OpenSSH
  #           sudo ufw allow 'Nginx Full'
  #           sudo ufw --force enable 
            
  #           echo "--------------------------------------------"
  #           echo "Performing the following actions for Client"
  #           echo "--------------------------------------------"
            
  #           cd ./application/client
  #           echo "REACT_APP_API_BASEURL=http://${{ env.SERVER_IP }}" | sudo tee .env > /dev/null
  #           sudo npm install
            
  #           echo "---------Nginx Configration---------------"
            
  #           sudo tee /etc/nginx/sites-available/myapp.conf > /dev/null <<EOF
  #           server {
  #               listen 80 default_server;
  #               server_name _;  
            
  #               location / {
  #                   proxy_pass http://localhost:3000/;
  #               }
            
  #               location /admin/ {
  #                   proxy_pass http://localhost:3001/;
  #               }
  #           }
  #           EOF
            
  #           sudo rm -r /etc/nginx/sites-enabled/default
  #           sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/
  #           sudo nginx -t
  #           sudo systemctl restart nginx
            
  #           echo "-------Starting the client----------"
  #           npm run build
  #           pm2 serve build/ 3000 --name "client"
            
  #           echo "-------------------------------------------"
  #           echo "Performing the following actions for Admin"
  #           echo "-------------------------------------------"
  #           cd /home/ubuntu
  #           cd ./application/admin
  #           echo "REACT_APP_API_BASEURL=http://${{ env.SERVER_IP }}" | sudo tee .env > /dev/null
  #           npm install
  #           npm run build
  #           sudo pm2 serve build/ 3001 --name "admin-server"
            
  #           echo "------------------------------------------"
  #           echo "-----Script Completed Successfully--------"
  #           echo "------------------------------------------"



#  provision-infra:
#     runs-on: ubuntu-latest
#     steps:  
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: Install Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_wrapper: false
#       - name: Format Terraform code
#         id: format
#         run: terraform fmt
#       - name: Terraform Init
#         id: init
#         run: terraform init
#       - name: Terraform Destroy
#         run: terraform destroy --auto-approve




            